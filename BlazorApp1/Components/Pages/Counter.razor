@page "/counter"
@using System.Net.Http
@using System.Text.Json
@using System.Threading.Tasks
@using System.Text.Json.Serialization
@using System.Net.Http.Headers;

@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<InputFile id="fileInput" OnChange="HandleFileChange" />
<button class="btn btn-primary" @onclick="UploadFile">Click me</button>

@if (uploadedFileName != null)
{
    <p>File Uploaded: @uploadedFileName</p>
}

@code {
    private IBrowserFile selectedFile;
    private string uploadedFileName;

    public Counter()
    {
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadFile()
    {
        try
        {
            IFormFile formFile = await ConvertToIFormFileAsync(selectedFile);

            using (var httpClient = new HttpClient())
            using (var content = new MultipartFormDataContent())
            {
                var streamContent = new StreamContent(formFile.OpenReadStream());
                streamContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                    {
                        Name = "file",
                        FileName = formFile.FileName
                    };

                content.Add(streamContent, "file", formFile.FileName);

                var response = await httpClient.PostAsync("https://localhost:7233/api/AzureFileStore/UploadFile", content);

                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("File uploaded successfully");
                }
                else
                {
                    Console.WriteLine($"Error: {response.StatusCode}");
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }



    public static async Task<IFormFile> ConvertToIFormFileAsync(IBrowserFile browserFile)
    {
        using (var memoryStream = new MemoryStream())
        {
            await browserFile.OpenReadStream().CopyToAsync(memoryStream);
            var fileName = browserFile.Name;
            var contentDisposition = $"form-data; name=\"file\"; filename=\"{fileName}\"";
            var contentType = browserFile.ContentType ?? "application/octet-stream";

            memoryStream.Position = 0; 

            var formFile = new FormFile(memoryStream, 0, memoryStream.Length, null, fileName)
                {
                    Headers = new HeaderDictionary(),
                    ContentType = contentType,
                    ContentDisposition = contentDisposition
                };

            return formFile;
        }
    }


}